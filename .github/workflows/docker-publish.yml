name: Docker

on:
  push:
    # Publish `main` as Docker `develop` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases and `latest`.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: boreas-scheduler

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.actor }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name, and also tag it as `latest`
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION="$(echo $VERSION | sed -e 's/^v//') latest"

          # Tag main branch as `develop`
          [ "$VERSION" == "main" ] && VERSION=develop

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          for VALUE in $VERSION
          do
              docker tag $IMAGE_NAME $IMAGE_ID:$VALUE
              docker push $IMAGE_ID:$VALUE
          done
